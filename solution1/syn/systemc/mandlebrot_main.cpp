// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mandlebrot_main.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mandlebrot_main::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mandlebrot_main::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state1 = "1";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state2 = "10";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state3 = "100";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state4 = "1000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state5 = "10000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state6 = "100000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state7 = "1000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state8 = "10000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state9 = "100000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state10 = "1000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state11 = "10000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state12 = "100000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state59 = "10000000000000000000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state60 = "100000000000000000000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state61 = "1000000000000000000000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state62 = "10000000000000000000000000000000000000000000000000000000000000";
const sc_lv<63> mandlebrot_main::ap_ST_fsm_state63 = "100000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> mandlebrot_main::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mandlebrot_main::ap_const_lv32_6 = "110";
const sc_lv<32> mandlebrot_main::ap_const_lv32_17 = "10111";
const sc_lv<32> mandlebrot_main::ap_const_lv32_C = "1100";
const sc_lv<32> mandlebrot_main::ap_const_lv32_1D = "11101";
const sc_lv<32> mandlebrot_main::ap_const_lv32_33 = "110011";
const sc_lv<32> mandlebrot_main::ap_const_lv32_39 = "111001";
const sc_lv<32> mandlebrot_main::ap_const_lv32_32 = "110010";
const sc_lv<32> mandlebrot_main::ap_const_lv32_37 = "110111";
const sc_lv<32> mandlebrot_main::ap_const_lv32_1 = "1";
const sc_lv<32> mandlebrot_main::ap_const_lv32_11 = "10001";
const sc_lv<32> mandlebrot_main::ap_const_lv32_12 = "10010";
const sc_lv<32> mandlebrot_main::ap_const_lv32_22 = "100010";
const sc_lv<32> mandlebrot_main::ap_const_lv32_23 = "100011";
const sc_lv<32> mandlebrot_main::ap_const_lv32_28 = "101000";
const sc_lv<32> mandlebrot_main::ap_const_lv32_2D = "101101";
const sc_lv<32> mandlebrot_main::ap_const_lv32_3E = "111110";
const sc_lv<10> mandlebrot_main::ap_const_lv10_0 = "0000000000";
const sc_lv<1> mandlebrot_main::ap_const_lv1_1 = "1";
const sc_lv<32> mandlebrot_main::ap_const_lv32_2E = "101110";
const sc_lv<1> mandlebrot_main::ap_const_lv1_0 = "0";
const sc_lv<11> mandlebrot_main::ap_const_lv11_0 = "00000000000";
const sc_lv<64> mandlebrot_main::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> mandlebrot_main::ap_const_lv64_BFF0000000000000 = "1011111111110000000000000000000000000000000000000000000000000000";
const sc_lv<64> mandlebrot_main::ap_const_lv64_C004000000000000 = "1100000000000100000000000000000000000000000000000000000000000000";
const sc_lv<32> mandlebrot_main::ap_const_lv32_D = "1101";
const sc_lv<32> mandlebrot_main::ap_const_lv32_1E = "11110";
const sc_lv<32> mandlebrot_main::ap_const_lv32_29 = "101001";
const sc_lv<32> mandlebrot_main::ap_const_lv32_3A = "111010";
const sc_lv<64> mandlebrot_main::ap_const_lv64_3F70000000000000 = "11111101110000000000000000000000000000000000000000000000000000";
const sc_lv<64> mandlebrot_main::ap_const_lv64_4000000000000000 = "100000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> mandlebrot_main::ap_const_lv32_7 = "111";
const sc_lv<32> mandlebrot_main::ap_const_lv32_18 = "11000";
const sc_lv<32> mandlebrot_main::ap_const_lv32_34 = "110100";
const sc_lv<64> mandlebrot_main::ap_const_lv64_4010000000000000 = "100000000010000000000000000000000000000000000000000000000000000";
const sc_lv<10> mandlebrot_main::ap_const_lv10_200 = "1000000000";
const sc_lv<10> mandlebrot_main::ap_const_lv10_1 = "1";
const sc_lv<11> mandlebrot_main::ap_const_lv11_400 = "10000000000";
const sc_lv<11> mandlebrot_main::ap_const_lv11_1 = "1";
const sc_lv<32> mandlebrot_main::ap_const_lv32_9 = "1001";
const sc_lv<11> mandlebrot_main::ap_const_lv11_7FF = "11111111111";
const sc_lv<52> mandlebrot_main::ap_const_lv52_0 = "0000000000000000000000000000000000000000000000000000";
const sc_lv<9> mandlebrot_main::ap_const_lv9_0 = "000000000";
const sc_lv<2> mandlebrot_main::ap_const_lv2_0 = "00";
const sc_lv<2> mandlebrot_main::ap_const_lv2_1 = "1";
const sc_lv<5> mandlebrot_main::ap_const_lv5_4 = "100";
const bool mandlebrot_main::ap_const_boolean_1 = true;

mandlebrot_main::mandlebrot_main(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mandlebrot_main_dbkb_U1 = new mandlebrot_main_dbkb<1,5,64,64,64>("mandlebrot_main_dbkb_U1");
    mandlebrot_main_dbkb_U1->clk(ap_clk);
    mandlebrot_main_dbkb_U1->reset(ap_rst);
    mandlebrot_main_dbkb_U1->din0(grp_fu_134_p0);
    mandlebrot_main_dbkb_U1->din1(grp_fu_134_p1);
    mandlebrot_main_dbkb_U1->opcode(grp_fu_134_opcode);
    mandlebrot_main_dbkb_U1->ce(ap_var_for_const0);
    mandlebrot_main_dbkb_U1->dout(grp_fu_134_p2);
    mandlebrot_main_dcud_U2 = new mandlebrot_main_dcud<1,6,64,64,64>("mandlebrot_main_dcud_U2");
    mandlebrot_main_dcud_U2->clk(ap_clk);
    mandlebrot_main_dcud_U2->reset(ap_rst);
    mandlebrot_main_dcud_U2->din0(grp_fu_140_p0);
    mandlebrot_main_dcud_U2->din1(grp_fu_140_p1);
    mandlebrot_main_dcud_U2->ce(ap_var_for_const0);
    mandlebrot_main_dcud_U2->dout(grp_fu_140_p2);
    mandlebrot_main_dcud_U3 = new mandlebrot_main_dcud<1,6,64,64,64>("mandlebrot_main_dcud_U3");
    mandlebrot_main_dcud_U3->clk(ap_clk);
    mandlebrot_main_dcud_U3->reset(ap_rst);
    mandlebrot_main_dcud_U3->din0(zi_i_reg_122);
    mandlebrot_main_dcud_U3->din1(zi_i_reg_122);
    mandlebrot_main_dcud_U3->ce(ap_var_for_const0);
    mandlebrot_main_dcud_U3->dout(grp_fu_147_p2);
    mandlebrot_main_ddEe_U4 = new mandlebrot_main_ddEe<1,1,64,64,1>("mandlebrot_main_ddEe_U4");
    mandlebrot_main_ddEe_U4->din0(tmp_1_i4_reg_365);
    mandlebrot_main_ddEe_U4->din1(ap_var_for_const1);
    mandlebrot_main_ddEe_U4->opcode(ap_var_for_const2);
    mandlebrot_main_ddEe_U4->dout(tmp_4_fu_156_p2);
    mandlebrot_main_seOg_U5 = new mandlebrot_main_seOg<1,6,32,64>("mandlebrot_main_seOg_U5");
    mandlebrot_main_seOg_U5->clk(ap_clk);
    mandlebrot_main_seOg_U5->reset(ap_rst);
    mandlebrot_main_seOg_U5->din0(grp_fu_161_p0);
    mandlebrot_main_seOg_U5->ce(ap_var_for_const0);
    mandlebrot_main_seOg_U5->dout(grp_fu_161_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state51);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state52);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state53);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state56);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state58);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state59);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state63);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_186_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_zr_i_phi_fu_114_p4);
    sensitive << ( zr_i_reg_110 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_186_p2 );

    SC_METHOD(thread_exitcond1_fu_186_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( y_assign_reg_74 );

    SC_METHOD(thread_exitcond_fu_207_p2);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( x_assign_reg_86 );

    SC_METHOD(thread_grp_fu_134_opcode);
    sensitive << ( ap_CS_fsm_state52 );
    sensitive << ( tmp_reg_346 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( tmp_5_fu_268_p2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state59 );

    SC_METHOD(thread_grp_fu_134_p0);
    sensitive << ( reg_169 );
    sensitive << ( ap_CS_fsm_state52 );
    sensitive << ( reg_175 );
    sensitive << ( tmp_9_i_reg_355 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state59 );

    SC_METHOD(thread_grp_fu_134_p1);
    sensitive << ( ap_CS_fsm_state52 );
    sensitive << ( ci_reg_323 );
    sensitive << ( cr_reg_341 );
    sensitive << ( tmp_i_6_reg_360 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state59 );

    SC_METHOD(thread_grp_fu_140_p0);
    sensitive << ( reg_164 );
    sensitive << ( reg_169 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_phi_mux_zr_i_phi_fu_114_p4 );
    sensitive << ( zr_i_reg_110 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state53 );

    SC_METHOD(thread_grp_fu_140_p1);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( zr_i_reg_110 );
    sensitive << ( zi_i_reg_122 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state53 );

    SC_METHOD(thread_grp_fu_161_p0);
    sensitive << ( y_assign_cast3_fu_181_p1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( x_assign_cast2_fu_202_p1 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_i_fu_227_p2);
    sensitive << ( n_reg_98 );

    SC_METHOD(thread_notlhs_fu_250_p2);
    sensitive << ( tmp_reg_346 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( tmp_1_fu_236_p4 );

    SC_METHOD(thread_notrhs_fu_256_p2);
    sensitive << ( tmp_reg_346 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( tmp_2_fu_246_p1 );

    SC_METHOD(thread_res_address0);
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( tmp_8_cast_fu_300_p1 );

    SC_METHOD(thread_res_ce0);
    sensitive << ( ap_CS_fsm_state47 );

    SC_METHOD(thread_res_d0);
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( tmp_7_fu_274_p1 );

    SC_METHOD(thread_res_we0);
    sensitive << ( tmp_reg_346 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( tmp_5_fu_268_p2 );

    SC_METHOD(thread_tmp_1_fu_236_p4);
    sensitive << ( tmp_1_i4_to_int_fu_233_p1 );

    SC_METHOD(thread_tmp_1_i4_to_int_fu_233_p1);
    sensitive << ( tmp_1_i4_reg_365 );

    SC_METHOD(thread_tmp_2_fu_246_p1);
    sensitive << ( tmp_1_i4_to_int_fu_233_p1 );

    SC_METHOD(thread_tmp_3_fu_262_p2);
    sensitive << ( notrhs_fu_256_p2 );
    sensitive << ( notlhs_fu_250_p2 );

    SC_METHOD(thread_tmp_5_fu_268_p2);
    sensitive << ( tmp_3_fu_262_p2 );
    sensitive << ( tmp_4_fu_156_p2 );

    SC_METHOD(thread_tmp_6_fu_283_p3);
    sensitive << ( x_assign_reg_86 );

    SC_METHOD(thread_tmp_7_cast_fu_291_p1);
    sensitive << ( tmp_6_fu_283_p3 );

    SC_METHOD(thread_tmp_7_fu_274_p1);
    sensitive << ( n_reg_98 );

    SC_METHOD(thread_tmp_8_cast_fu_300_p1);
    sensitive << ( tmp_8_fu_295_p2 );

    SC_METHOD(thread_tmp_8_fu_295_p2);
    sensitive << ( tmp_cast_reg_318 );
    sensitive << ( tmp_7_cast_fu_291_p1 );

    SC_METHOD(thread_tmp_cast_fu_198_p1);
    sensitive << ( y_assign_reg_74 );

    SC_METHOD(thread_tmp_fu_219_p3);
    sensitive << ( n_reg_98 );

    SC_METHOD(thread_x_assign_cast2_fu_202_p1);
    sensitive << ( x_assign_reg_86 );

    SC_METHOD(thread_x_fu_213_p2);
    sensitive << ( x_assign_reg_86 );

    SC_METHOD(thread_y_assign_cast3_fu_181_p1);
    sensitive << ( y_assign_reg_74 );

    SC_METHOD(thread_y_fu_192_p2);
    sensitive << ( y_assign_reg_74 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( tmp_fu_219_p3 );
    sensitive << ( tmp_reg_346 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( exitcond_fu_207_p2 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( tmp_5_fu_268_p2 );
    sensitive << ( exitcond1_fu_186_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "000000000000000000000000000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mandlebrot_main_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, res_address0, "(port)res_address0");
    sc_trace(mVcdFile, res_ce0, "(port)res_ce0");
    sc_trace(mVcdFile, res_we0, "(port)res_we0");
    sc_trace(mVcdFile, res_d0, "(port)res_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_161_p1, "grp_fu_161_p1");
    sc_trace(mVcdFile, reg_164, "reg_164");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, grp_fu_140_p2, "grp_fu_140_p2");
    sc_trace(mVcdFile, reg_169, "reg_169");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state52, "ap_CS_fsm_state52");
    sc_trace(mVcdFile, ap_CS_fsm_state58, "ap_CS_fsm_state58");
    sc_trace(mVcdFile, grp_fu_134_p2, "grp_fu_134_p2");
    sc_trace(mVcdFile, reg_175, "reg_175");
    sc_trace(mVcdFile, ap_CS_fsm_state51, "ap_CS_fsm_state51");
    sc_trace(mVcdFile, ap_CS_fsm_state56, "ap_CS_fsm_state56");
    sc_trace(mVcdFile, y_assign_cast3_fu_181_p1, "y_assign_cast3_fu_181_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, y_fu_192_p2, "y_fu_192_p2");
    sc_trace(mVcdFile, y_reg_313, "y_reg_313");
    sc_trace(mVcdFile, tmp_cast_fu_198_p1, "tmp_cast_fu_198_p1");
    sc_trace(mVcdFile, tmp_cast_reg_318, "tmp_cast_reg_318");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ci_reg_323, "ci_reg_323");
    sc_trace(mVcdFile, x_assign_cast2_fu_202_p1, "x_assign_cast2_fu_202_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, x_fu_213_p2, "x_fu_213_p2");
    sc_trace(mVcdFile, x_reg_336, "x_reg_336");
    sc_trace(mVcdFile, cr_reg_341, "cr_reg_341");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, tmp_fu_219_p3, "tmp_fu_219_p3");
    sc_trace(mVcdFile, tmp_reg_346, "tmp_reg_346");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, i_fu_227_p2, "i_fu_227_p2");
    sc_trace(mVcdFile, i_reg_350, "i_reg_350");
    sc_trace(mVcdFile, tmp_9_i_reg_355, "tmp_9_i_reg_355");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, grp_fu_147_p2, "grp_fu_147_p2");
    sc_trace(mVcdFile, tmp_i_6_reg_360, "tmp_i_6_reg_360");
    sc_trace(mVcdFile, tmp_1_i4_reg_365, "tmp_1_i4_reg_365");
    sc_trace(mVcdFile, ap_CS_fsm_state46, "ap_CS_fsm_state46");
    sc_trace(mVcdFile, ap_CS_fsm_state63, "ap_CS_fsm_state63");
    sc_trace(mVcdFile, y_assign_reg_74, "y_assign_reg_74");
    sc_trace(mVcdFile, exitcond_fu_207_p2, "exitcond_fu_207_p2");
    sc_trace(mVcdFile, x_assign_reg_86, "x_assign_reg_86");
    sc_trace(mVcdFile, ap_CS_fsm_state47, "ap_CS_fsm_state47");
    sc_trace(mVcdFile, tmp_5_fu_268_p2, "tmp_5_fu_268_p2");
    sc_trace(mVcdFile, n_reg_98, "n_reg_98");
    sc_trace(mVcdFile, ap_phi_mux_zr_i_phi_fu_114_p4, "ap_phi_mux_zr_i_phi_fu_114_p4");
    sc_trace(mVcdFile, zr_i_reg_110, "zr_i_reg_110");
    sc_trace(mVcdFile, zi_i_reg_122, "zi_i_reg_122");
    sc_trace(mVcdFile, tmp_8_cast_fu_300_p1, "tmp_8_cast_fu_300_p1");
    sc_trace(mVcdFile, grp_fu_134_p0, "grp_fu_134_p0");
    sc_trace(mVcdFile, grp_fu_134_p1, "grp_fu_134_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, ap_CS_fsm_state59, "ap_CS_fsm_state59");
    sc_trace(mVcdFile, grp_fu_140_p0, "grp_fu_140_p0");
    sc_trace(mVcdFile, grp_fu_140_p1, "grp_fu_140_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state53, "ap_CS_fsm_state53");
    sc_trace(mVcdFile, grp_fu_161_p0, "grp_fu_161_p0");
    sc_trace(mVcdFile, tmp_1_i4_to_int_fu_233_p1, "tmp_1_i4_to_int_fu_233_p1");
    sc_trace(mVcdFile, tmp_1_fu_236_p4, "tmp_1_fu_236_p4");
    sc_trace(mVcdFile, tmp_2_fu_246_p1, "tmp_2_fu_246_p1");
    sc_trace(mVcdFile, notrhs_fu_256_p2, "notrhs_fu_256_p2");
    sc_trace(mVcdFile, notlhs_fu_250_p2, "notlhs_fu_250_p2");
    sc_trace(mVcdFile, tmp_3_fu_262_p2, "tmp_3_fu_262_p2");
    sc_trace(mVcdFile, tmp_4_fu_156_p2, "tmp_4_fu_156_p2");
    sc_trace(mVcdFile, tmp_7_fu_274_p1, "tmp_7_fu_274_p1");
    sc_trace(mVcdFile, tmp_6_fu_283_p3, "tmp_6_fu_283_p3");
    sc_trace(mVcdFile, tmp_7_cast_fu_291_p1, "tmp_7_cast_fu_291_p1");
    sc_trace(mVcdFile, tmp_8_fu_295_p2, "tmp_8_fu_295_p2");
    sc_trace(mVcdFile, grp_fu_134_opcode, "grp_fu_134_opcode");
    sc_trace(mVcdFile, exitcond1_fu_186_p2, "exitcond1_fu_186_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("mandlebrot_main.hdltvin.dat");
    mHdltvoutHandle.open("mandlebrot_main.hdltvout.dat");
}

mandlebrot_main::~mandlebrot_main() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete mandlebrot_main_dbkb_U1;
    delete mandlebrot_main_dcud_U2;
    delete mandlebrot_main_dcud_U3;
    delete mandlebrot_main_ddEe_U4;
    delete mandlebrot_main_seOg_U5;
}

void mandlebrot_main::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void mandlebrot_main::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv64_4010000000000000;
}

void mandlebrot_main::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_4;
}

void mandlebrot_main::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read())) {
        n_reg_98 = i_reg_350.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        n_reg_98 = ap_const_lv10_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        x_assign_reg_86 = ap_const_lv11_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && 
                (esl_seteq<1,1,1>(tmp_reg_346.read(), ap_const_lv1_1) || 
                 esl_seteq<1,1,1>(tmp_5_fu_268_p2.read(), ap_const_lv1_0)))) {
        x_assign_reg_86 = x_reg_336.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_207_p2.read(), ap_const_lv1_1))) {
        y_assign_reg_74 = y_reg_313.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        y_assign_reg_74 = ap_const_lv10_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read())) {
        zi_i_reg_122 = grp_fu_134_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        zi_i_reg_122 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read())) {
        zr_i_reg_110 = reg_175.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        zr_i_reg_110 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        ci_reg_323 = grp_fu_134_p2.read();
        tmp_cast_reg_318 = tmp_cast_fu_198_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        cr_reg_341 = grp_fu_134_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        i_reg_350 = i_fu_227_p2.read();
        tmp_reg_346 = n_reg_98.read().range(9, 9);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        reg_164 = grp_fu_161_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()))) {
        reg_169 = grp_fu_140_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()))) {
        reg_175 = grp_fu_134_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) {
        tmp_1_i4_reg_365 = grp_fu_134_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        tmp_9_i_reg_355 = grp_fu_140_p2.read();
        tmp_i_6_reg_360 = grp_fu_147_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        x_reg_336 = x_fu_213_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        y_reg_313 = y_fu_192_p2.read();
    }
}

void mandlebrot_main::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mandlebrot_main::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void mandlebrot_main::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void mandlebrot_main::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void mandlebrot_main::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void mandlebrot_main::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mandlebrot_main::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void mandlebrot_main::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void mandlebrot_main::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void mandlebrot_main::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void mandlebrot_main::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void mandlebrot_main::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void mandlebrot_main::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void mandlebrot_main::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void mandlebrot_main::thread_ap_CS_fsm_state46() {
    ap_CS_fsm_state46 = ap_CS_fsm.read()[45];
}

void mandlebrot_main::thread_ap_CS_fsm_state47() {
    ap_CS_fsm_state47 = ap_CS_fsm.read()[46];
}

void mandlebrot_main::thread_ap_CS_fsm_state51() {
    ap_CS_fsm_state51 = ap_CS_fsm.read()[50];
}

void mandlebrot_main::thread_ap_CS_fsm_state52() {
    ap_CS_fsm_state52 = ap_CS_fsm.read()[51];
}

void mandlebrot_main::thread_ap_CS_fsm_state53() {
    ap_CS_fsm_state53 = ap_CS_fsm.read()[52];
}

void mandlebrot_main::thread_ap_CS_fsm_state56() {
    ap_CS_fsm_state56 = ap_CS_fsm.read()[55];
}

void mandlebrot_main::thread_ap_CS_fsm_state58() {
    ap_CS_fsm_state58 = ap_CS_fsm.read()[57];
}

void mandlebrot_main::thread_ap_CS_fsm_state59() {
    ap_CS_fsm_state59 = ap_CS_fsm.read()[58];
}

void mandlebrot_main::thread_ap_CS_fsm_state63() {
    ap_CS_fsm_state63 = ap_CS_fsm.read()[62];
}

void mandlebrot_main::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void mandlebrot_main::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void mandlebrot_main::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_186_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mandlebrot_main::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mandlebrot_main::thread_ap_phi_mux_zr_i_phi_fu_114_p4() {
    ap_phi_mux_zr_i_phi_fu_114_p4 = zr_i_reg_110.read();
}

void mandlebrot_main::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_186_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mandlebrot_main::thread_exitcond1_fu_186_p2() {
    exitcond1_fu_186_p2 = (!y_assign_reg_74.read().is_01() || !ap_const_lv10_200.is_01())? sc_lv<1>(): sc_lv<1>(y_assign_reg_74.read() == ap_const_lv10_200);
}

void mandlebrot_main::thread_exitcond_fu_207_p2() {
    exitcond_fu_207_p2 = (!x_assign_reg_86.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(x_assign_reg_86.read() == ap_const_lv11_400);
}

void mandlebrot_main::thread_grp_fu_134_opcode() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && 
         esl_seteq<1,1,1>(tmp_reg_346.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_268_p2.read()))) {
        grp_fu_134_opcode = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()))) {
        grp_fu_134_opcode = ap_const_lv2_0;
    } else {
        grp_fu_134_opcode = "XX";
    }
}

void mandlebrot_main::thread_grp_fu_134_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read())) {
        grp_fu_134_p0 = reg_175.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        grp_fu_134_p0 = tmp_9_i_reg_355.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()))) {
        grp_fu_134_p0 = reg_169.read();
    } else {
        grp_fu_134_p0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mandlebrot_main::thread_grp_fu_134_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read())) {
        grp_fu_134_p1 = ci_reg_323.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read())) {
        grp_fu_134_p1 = cr_reg_341.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        grp_fu_134_p1 = tmp_i_6_reg_360.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        grp_fu_134_p1 = ap_const_lv64_C004000000000000;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_fu_134_p1 = ap_const_lv64_BFF0000000000000;
    } else {
        grp_fu_134_p1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mandlebrot_main::thread_grp_fu_140_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read())) {
        grp_fu_140_p0 = reg_169.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        grp_fu_140_p0 = zr_i_reg_110.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        grp_fu_140_p0 = ap_phi_mux_zr_i_phi_fu_114_p4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        grp_fu_140_p0 = reg_164.read();
    } else {
        grp_fu_140_p0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mandlebrot_main::thread_grp_fu_140_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read())) {
        grp_fu_140_p1 = zi_i_reg_122.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        grp_fu_140_p1 = ap_const_lv64_4000000000000000;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        grp_fu_140_p1 = zr_i_reg_110.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        grp_fu_140_p1 = ap_const_lv64_3F70000000000000;
    } else {
        grp_fu_140_p1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mandlebrot_main::thread_grp_fu_161_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        grp_fu_161_p0 = x_assign_cast2_fu_202_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_161_p0 = y_assign_cast3_fu_181_p1.read();
    } else {
        grp_fu_161_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mandlebrot_main::thread_i_fu_227_p2() {
    i_fu_227_p2 = (!n_reg_98.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(n_reg_98.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void mandlebrot_main::thread_notlhs_fu_250_p2() {
    notlhs_fu_250_p2 = (!tmp_1_fu_236_p4.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_236_p4.read() != ap_const_lv11_7FF);
}

void mandlebrot_main::thread_notrhs_fu_256_p2() {
    notrhs_fu_256_p2 = (!tmp_2_fu_246_p1.read().is_01() || !ap_const_lv52_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_2_fu_246_p1.read() == ap_const_lv52_0);
}

void mandlebrot_main::thread_res_address0() {
    res_address0 =  (sc_lv<19>) (tmp_8_cast_fu_300_p1.read());
}

void mandlebrot_main::thread_res_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        res_ce0 = ap_const_logic_1;
    } else {
        res_ce0 = ap_const_logic_0;
    }
}

void mandlebrot_main::thread_res_d0() {
    res_d0 = esl_zext<32,8>(tmp_7_fu_274_p1.read());
}

void mandlebrot_main::thread_res_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && 
         (esl_seteq<1,1,1>(tmp_reg_346.read(), ap_const_lv1_1) || 
          esl_seteq<1,1,1>(tmp_5_fu_268_p2.read(), ap_const_lv1_0)))) {
        res_we0 = ap_const_logic_1;
    } else {
        res_we0 = ap_const_logic_0;
    }
}

void mandlebrot_main::thread_tmp_1_fu_236_p4() {
    tmp_1_fu_236_p4 = tmp_1_i4_to_int_fu_233_p1.read().range(62, 52);
}

void mandlebrot_main::thread_tmp_1_i4_to_int_fu_233_p1() {
    tmp_1_i4_to_int_fu_233_p1 = tmp_1_i4_reg_365.read();
}

void mandlebrot_main::thread_tmp_2_fu_246_p1() {
    tmp_2_fu_246_p1 = tmp_1_i4_to_int_fu_233_p1.read().range(52-1, 0);
}

void mandlebrot_main::thread_tmp_3_fu_262_p2() {
    tmp_3_fu_262_p2 = (notrhs_fu_256_p2.read() | notlhs_fu_250_p2.read());
}

void mandlebrot_main::thread_tmp_5_fu_268_p2() {
    tmp_5_fu_268_p2 = (tmp_3_fu_262_p2.read() & tmp_4_fu_156_p2.read());
}

void mandlebrot_main::thread_tmp_6_fu_283_p3() {
    tmp_6_fu_283_p3 = esl_concat<11,9>(x_assign_reg_86.read(), ap_const_lv9_0);
}

void mandlebrot_main::thread_tmp_7_cast_fu_291_p1() {
    tmp_7_cast_fu_291_p1 = esl_zext<21,20>(tmp_6_fu_283_p3.read());
}

void mandlebrot_main::thread_tmp_7_fu_274_p1() {
    tmp_7_fu_274_p1 = n_reg_98.read().range(8-1, 0);
}

void mandlebrot_main::thread_tmp_8_cast_fu_300_p1() {
    tmp_8_cast_fu_300_p1 = esl_zext<64,21>(tmp_8_fu_295_p2.read());
}

void mandlebrot_main::thread_tmp_8_fu_295_p2() {
    tmp_8_fu_295_p2 = (!tmp_7_cast_fu_291_p1.read().is_01() || !tmp_cast_reg_318.read().is_01())? sc_lv<21>(): (sc_biguint<21>(tmp_7_cast_fu_291_p1.read()) + sc_biguint<21>(tmp_cast_reg_318.read()));
}

void mandlebrot_main::thread_tmp_cast_fu_198_p1() {
    tmp_cast_fu_198_p1 = esl_zext<21,10>(y_assign_reg_74.read());
}

void mandlebrot_main::thread_tmp_fu_219_p3() {
    tmp_fu_219_p3 = n_reg_98.read().range(9, 9);
}

void mandlebrot_main::thread_x_assign_cast2_fu_202_p1() {
    x_assign_cast2_fu_202_p1 = esl_zext<32,11>(x_assign_reg_86.read());
}

void mandlebrot_main::thread_x_fu_213_p2() {
    x_fu_213_p2 = (!x_assign_reg_86.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(x_assign_reg_86.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void mandlebrot_main::thread_y_assign_cast3_fu_181_p1() {
    y_assign_cast3_fu_181_p1 = esl_zext<32,10>(y_assign_reg_74.read());
}

void mandlebrot_main::thread_y_fu_192_p2() {
    y_fu_192_p2 = (!y_assign_reg_74.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(y_assign_reg_74.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void mandlebrot_main::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_186_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(exitcond_fu_207_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && esl_seteq<1,1,1>(tmp_fu_219_p3.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state47;
            } else {
                ap_NS_fsm = ap_ST_fsm_state37;
            }
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && (esl_seteq<1,1,1>(tmp_reg_346.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(tmp_5_fu_268_p2.read(), ap_const_lv1_0)))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state48;
            }
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state50;
            break;
        case 562949953421312 : 
            ap_NS_fsm = ap_ST_fsm_state51;
            break;
        case 1125899906842624 : 
            ap_NS_fsm = ap_ST_fsm_state52;
            break;
        case 2251799813685248 : 
            ap_NS_fsm = ap_ST_fsm_state53;
            break;
        case 4503599627370496 : 
            ap_NS_fsm = ap_ST_fsm_state54;
            break;
        case 9007199254740992 : 
            ap_NS_fsm = ap_ST_fsm_state55;
            break;
        case 18014398509481984 : 
            ap_NS_fsm = ap_ST_fsm_state56;
            break;
        case 36028797018963968 : 
            ap_NS_fsm = ap_ST_fsm_state57;
            break;
        case 72057594037927936 : 
            ap_NS_fsm = ap_ST_fsm_state58;
            break;
        case 144115188075855872 : 
            ap_NS_fsm = ap_ST_fsm_state59;
            break;
        case 288230376151711744 : 
            ap_NS_fsm = ap_ST_fsm_state60;
            break;
        case 576460752303423488 : 
            ap_NS_fsm = ap_ST_fsm_state61;
            break;
        case 1152921504606846976 : 
            ap_NS_fsm = ap_ST_fsm_state62;
            break;
        case 2305843009213693952 : 
            ap_NS_fsm = ap_ST_fsm_state63;
            break;
        case 4611686018427387904 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<63>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void mandlebrot_main::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_address0\" :  \"" << res_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_ce0\" :  \"" << res_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_we0\" :  \"" << res_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_d0\" :  \"" << res_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

