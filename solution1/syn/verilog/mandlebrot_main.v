// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mandlebrot_main,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.403200,HLS_SYN_LAT=3771212801,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=25,HLS_SYN_FF=2397,HLS_SYN_LUT=4039}" *)

module mandlebrot_main (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_state1 = 63'd1;
parameter    ap_ST_fsm_state2 = 63'd2;
parameter    ap_ST_fsm_state3 = 63'd4;
parameter    ap_ST_fsm_state4 = 63'd8;
parameter    ap_ST_fsm_state5 = 63'd16;
parameter    ap_ST_fsm_state6 = 63'd32;
parameter    ap_ST_fsm_state7 = 63'd64;
parameter    ap_ST_fsm_state8 = 63'd128;
parameter    ap_ST_fsm_state9 = 63'd256;
parameter    ap_ST_fsm_state10 = 63'd512;
parameter    ap_ST_fsm_state11 = 63'd1024;
parameter    ap_ST_fsm_state12 = 63'd2048;
parameter    ap_ST_fsm_state13 = 63'd4096;
parameter    ap_ST_fsm_state14 = 63'd8192;
parameter    ap_ST_fsm_state15 = 63'd16384;
parameter    ap_ST_fsm_state16 = 63'd32768;
parameter    ap_ST_fsm_state17 = 63'd65536;
parameter    ap_ST_fsm_state18 = 63'd131072;
parameter    ap_ST_fsm_state19 = 63'd262144;
parameter    ap_ST_fsm_state20 = 63'd524288;
parameter    ap_ST_fsm_state21 = 63'd1048576;
parameter    ap_ST_fsm_state22 = 63'd2097152;
parameter    ap_ST_fsm_state23 = 63'd4194304;
parameter    ap_ST_fsm_state24 = 63'd8388608;
parameter    ap_ST_fsm_state25 = 63'd16777216;
parameter    ap_ST_fsm_state26 = 63'd33554432;
parameter    ap_ST_fsm_state27 = 63'd67108864;
parameter    ap_ST_fsm_state28 = 63'd134217728;
parameter    ap_ST_fsm_state29 = 63'd268435456;
parameter    ap_ST_fsm_state30 = 63'd536870912;
parameter    ap_ST_fsm_state31 = 63'd1073741824;
parameter    ap_ST_fsm_state32 = 63'd2147483648;
parameter    ap_ST_fsm_state33 = 63'd4294967296;
parameter    ap_ST_fsm_state34 = 63'd8589934592;
parameter    ap_ST_fsm_state35 = 63'd17179869184;
parameter    ap_ST_fsm_state36 = 63'd34359738368;
parameter    ap_ST_fsm_state37 = 63'd68719476736;
parameter    ap_ST_fsm_state38 = 63'd137438953472;
parameter    ap_ST_fsm_state39 = 63'd274877906944;
parameter    ap_ST_fsm_state40 = 63'd549755813888;
parameter    ap_ST_fsm_state41 = 63'd1099511627776;
parameter    ap_ST_fsm_state42 = 63'd2199023255552;
parameter    ap_ST_fsm_state43 = 63'd4398046511104;
parameter    ap_ST_fsm_state44 = 63'd8796093022208;
parameter    ap_ST_fsm_state45 = 63'd17592186044416;
parameter    ap_ST_fsm_state46 = 63'd35184372088832;
parameter    ap_ST_fsm_state47 = 63'd70368744177664;
parameter    ap_ST_fsm_state48 = 63'd140737488355328;
parameter    ap_ST_fsm_state49 = 63'd281474976710656;
parameter    ap_ST_fsm_state50 = 63'd562949953421312;
parameter    ap_ST_fsm_state51 = 63'd1125899906842624;
parameter    ap_ST_fsm_state52 = 63'd2251799813685248;
parameter    ap_ST_fsm_state53 = 63'd4503599627370496;
parameter    ap_ST_fsm_state54 = 63'd9007199254740992;
parameter    ap_ST_fsm_state55 = 63'd18014398509481984;
parameter    ap_ST_fsm_state56 = 63'd36028797018963968;
parameter    ap_ST_fsm_state57 = 63'd72057594037927936;
parameter    ap_ST_fsm_state58 = 63'd144115188075855872;
parameter    ap_ST_fsm_state59 = 63'd288230376151711744;
parameter    ap_ST_fsm_state60 = 63'd576460752303423488;
parameter    ap_ST_fsm_state61 = 63'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 63'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 63'd4611686018427387904;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [18:0] res_address0;
output   res_ce0;
output   res_we0;
output  [31:0] res_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_ce0;
reg res_we0;

(* fsm_encoding = "none" *) reg   [62:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_161_p1;
reg   [63:0] reg_164;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state24;
wire   [63:0] grp_fu_140_p2;
reg   [63:0] reg_169;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state58;
wire   [63:0] grp_fu_134_p2;
reg   [63:0] reg_175;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state56;
wire   [31:0] y_assign_cast3_fu_181_p1;
wire    ap_CS_fsm_state2;
wire   [9:0] y_fu_192_p2;
reg   [9:0] y_reg_313;
wire   [20:0] tmp_cast_fu_198_p1;
reg   [20:0] tmp_cast_reg_318;
wire    ap_CS_fsm_state18;
reg   [63:0] ci_reg_323;
wire   [31:0] x_assign_cast2_fu_202_p1;
wire    ap_CS_fsm_state19;
wire   [10:0] x_fu_213_p2;
reg   [10:0] x_reg_336;
reg   [63:0] cr_reg_341;
wire    ap_CS_fsm_state35;
wire   [0:0] tmp_fu_219_p3;
reg   [0:0] tmp_reg_346;
wire    ap_CS_fsm_state36;
wire   [9:0] i_fu_227_p2;
reg   [9:0] i_reg_350;
reg   [63:0] tmp_9_i_reg_355;
wire    ap_CS_fsm_state41;
wire   [63:0] grp_fu_147_p2;
reg   [63:0] tmp_i_6_reg_360;
reg   [63:0] tmp_1_i4_reg_365;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state63;
reg   [9:0] y_assign_reg_74;
wire   [0:0] exitcond_fu_207_p2;
reg   [10:0] x_assign_reg_86;
wire    ap_CS_fsm_state47;
wire   [0:0] tmp_5_fu_268_p2;
reg   [9:0] n_reg_98;
wire   [63:0] ap_phi_mux_zr_i_phi_fu_114_p4;
reg   [63:0] zr_i_reg_110;
reg   [63:0] zi_i_reg_122;
wire   [63:0] tmp_8_cast_fu_300_p1;
reg   [63:0] grp_fu_134_p0;
reg   [63:0] grp_fu_134_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state59;
reg   [63:0] grp_fu_140_p0;
reg   [63:0] grp_fu_140_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state53;
reg   [31:0] grp_fu_161_p0;
wire   [63:0] tmp_1_i4_to_int_fu_233_p1;
wire   [10:0] tmp_1_fu_236_p4;
wire   [51:0] tmp_2_fu_246_p1;
wire   [0:0] notrhs_fu_256_p2;
wire   [0:0] notlhs_fu_250_p2;
wire   [0:0] tmp_3_fu_262_p2;
wire   [0:0] tmp_4_fu_156_p2;
wire   [7:0] tmp_7_fu_274_p1;
wire   [19:0] tmp_6_fu_283_p3;
wire   [20:0] tmp_7_cast_fu_291_p1;
wire   [20:0] tmp_8_fu_295_p2;
reg   [1:0] grp_fu_134_opcode;
wire   [0:0] exitcond1_fu_186_p2;
reg   [62:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 63'd1;
end

mandlebrot_main_dbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandlebrot_main_dbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_134_p0),
    .din1(grp_fu_134_p1),
    .opcode(grp_fu_134_opcode),
    .ce(1'b1),
    .dout(grp_fu_134_p2)
);

mandlebrot_main_dcud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandlebrot_main_dcud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_140_p0),
    .din1(grp_fu_140_p1),
    .ce(1'b1),
    .dout(grp_fu_140_p2)
);

mandlebrot_main_dcud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandlebrot_main_dcud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(zi_i_reg_122),
    .din1(zi_i_reg_122),
    .ce(1'b1),
    .dout(grp_fu_147_p2)
);

mandlebrot_main_ddEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
mandlebrot_main_ddEe_U4(
    .din0(tmp_1_i4_reg_365),
    .din1(64'd4616189618054758400),
    .opcode(5'd4),
    .dout(tmp_4_fu_156_p2)
);

mandlebrot_main_seOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mandlebrot_main_seOg_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_161_p0),
    .ce(1'b1),
    .dout(grp_fu_161_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        n_reg_98 <= i_reg_350;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        n_reg_98 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        x_assign_reg_86 <= 11'd0;
    end else if (((1'b1 == ap_CS_fsm_state47) & ((tmp_5_fu_268_p2 == 1'd0) | (tmp_reg_346 == 1'd1)))) begin
        x_assign_reg_86 <= x_reg_336;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_207_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        y_assign_reg_74 <= y_reg_313;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_assign_reg_74 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        zi_i_reg_122 <= grp_fu_134_p2;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        zi_i_reg_122 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        zr_i_reg_110 <= reg_175;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        zr_i_reg_110 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ci_reg_323 <= grp_fu_134_p2;
        tmp_cast_reg_318[9 : 0] <= tmp_cast_fu_198_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        cr_reg_341 <= grp_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        i_reg_350 <= i_fu_227_p2;
        tmp_reg_346 <= n_reg_98[32'd9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state24))) begin
        reg_164 <= grp_fu_161_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_169 <= grp_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state51))) begin
        reg_175 <= grp_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        tmp_1_i4_reg_365 <= grp_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        tmp_9_i_reg_355 <= grp_fu_140_p2;
        tmp_i_6_reg_360 <= grp_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        x_reg_336 <= x_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_reg_313 <= y_fu_192_p2;
    end
end

always @ (*) begin
    if (((exitcond1_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_5_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47) & (tmp_reg_346 == 1'd0))) begin
        grp_fu_134_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state52))) begin
        grp_fu_134_opcode = 2'd0;
    end else begin
        grp_fu_134_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_134_p0 = reg_175;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state47))) begin
        grp_fu_134_p0 = tmp_9_i_reg_355;
    end else if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_134_p0 = reg_169;
    end else begin
        grp_fu_134_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_134_p1 = ci_reg_323;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_134_p1 = cr_reg_341;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state47))) begin
        grp_fu_134_p1 = tmp_i_6_reg_360;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_134_p1 = 64'd13836183955189006336;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_134_p1 = 64'd13830554455654793216;
    end else begin
        grp_fu_134_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        grp_fu_140_p0 = reg_169;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_140_p0 = zr_i_reg_110;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_140_p0 = ap_phi_mux_zr_i_phi_fu_114_p4;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_140_p0 = reg_164;
    end else begin
        grp_fu_140_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        grp_fu_140_p1 = zi_i_reg_122;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_140_p1 = 64'd4611686018427387904;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_140_p1 = zr_i_reg_110;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_140_p1 = 64'd4571153621781053440;
    end else begin
        grp_fu_140_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_161_p0 = x_assign_cast2_fu_202_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_161_p0 = y_assign_cast3_fu_181_p1;
    end else begin
        grp_fu_161_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) & ((tmp_5_fu_268_p2 == 1'd0) | (tmp_reg_346 == 1'd1)))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((exitcond_fu_207_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (tmp_fu_219_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & ((tmp_5_fu_268_p2 == 1'd0) | (tmp_reg_346 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_phi_mux_zr_i_phi_fu_114_p4 = zr_i_reg_110;

assign exitcond1_fu_186_p2 = ((y_assign_reg_74 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond_fu_207_p2 = ((x_assign_reg_86 == 11'd1024) ? 1'b1 : 1'b0);

assign i_fu_227_p2 = (n_reg_98 + 10'd1);

assign notlhs_fu_250_p2 = ((tmp_1_fu_236_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notrhs_fu_256_p2 = ((tmp_2_fu_246_p1 == 52'd0) ? 1'b1 : 1'b0);

assign res_address0 = tmp_8_cast_fu_300_p1;

assign res_d0 = tmp_7_fu_274_p1;

assign tmp_1_fu_236_p4 = {{tmp_1_i4_to_int_fu_233_p1[62:52]}};

assign tmp_1_i4_to_int_fu_233_p1 = tmp_1_i4_reg_365;

assign tmp_2_fu_246_p1 = tmp_1_i4_to_int_fu_233_p1[51:0];

assign tmp_3_fu_262_p2 = (notrhs_fu_256_p2 | notlhs_fu_250_p2);

assign tmp_5_fu_268_p2 = (tmp_4_fu_156_p2 & tmp_3_fu_262_p2);

assign tmp_6_fu_283_p3 = {{x_assign_reg_86}, {9'd0}};

assign tmp_7_cast_fu_291_p1 = tmp_6_fu_283_p3;

assign tmp_7_fu_274_p1 = n_reg_98[7:0];

assign tmp_8_cast_fu_300_p1 = tmp_8_fu_295_p2;

assign tmp_8_fu_295_p2 = (tmp_7_cast_fu_291_p1 + tmp_cast_reg_318);

assign tmp_cast_fu_198_p1 = y_assign_reg_74;

assign tmp_fu_219_p3 = n_reg_98[32'd9];

assign x_assign_cast2_fu_202_p1 = x_assign_reg_86;

assign x_fu_213_p2 = (x_assign_reg_86 + 11'd1);

assign y_assign_cast3_fu_181_p1 = y_assign_reg_74;

assign y_fu_192_p2 = (y_assign_reg_74 + 10'd1);

always @ (posedge ap_clk) begin
    tmp_cast_reg_318[20:10] <= 11'b00000000000;
end

endmodule //mandlebrot_main
